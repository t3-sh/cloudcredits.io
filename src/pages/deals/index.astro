---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import PageHeader from "@/partials/PageHeader.astro";
import ProgramCard from "@/layouts/components/ProgramCard.astro";
import StatGroup from "@/components/StatGroup.astro";
import Stat from "@/components/Stat.astro";
import { FaFilter } from "react-icons/fa";

// Get all programs and providers
const allPrograms = await getCollection("programs");
const providers = await getCollection("providers");
const activeProviders = providers.filter((provider) => provider.data.active);

// Filter active programs
const activePrograms = allPrograms.filter(
  (program) => program.data.status === "Active",
);

// Calculate stats
const totalPrograms = allPrograms.length;
const totalActivePrograms = activePrograms.length;

// Calculate total value of credits across all programs
const creditPrograms = allPrograms.filter(
  (p) => p.data.value_type === "credits",
);
const totalCreditValue = creditPrograms.reduce(
  (sum, program) => sum + program.data.max_value,
  0,
);

// Get unique tags across all programs
const allTags = [
  ...new Set(allPrograms.flatMap((program) => program.data.tags)),
];

// Sort tags alphabetically
allTags.sort();
---

<Base
  title="Startup Deals & Cloud Credits - CloudCredits.io"
  meta_title="150+ Free Cloud Credits & Startup Deals | CloudCredits.io"
  description="Browse 150+ verified startup deals: AWS credits, Google Cloud, Azure, MongoDB, GitHub, Notion discounts. Filter by tags, value, and eligibility. Updated daily by community."
>
  <PageHeader title="Deals" />

  <!-- Filter Section -->
  <div class="container mt-3">
    <div class="flex flex-wrap items-center justify-between gap-4 mb-8">
      <div class="flex items-center gap-3">
        <h2 class="text-2xl font-bold">Tags</h2>
        <span
          id="program-counter"
          class="text-sm text-gray-500 dark:text-gray-400"
        >
          Showing all {allPrograms.length} programs
        </span>
      </div>

      <div class="flex flex-wrap items-center gap-3">
        <button
          id="clear-filter"
          class="inline-flex items-center gap-1.5 px-3 py-1 rounded-full
              bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm
              border border-gray-200 dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-gray-700
              transition-all duration-300 hidden"
          aria-label="Clear filter"
        >
          Clear filter
        </button>
        {
          allTags.map((tag) => (
            <button
              class="inline-flex items-center gap-1.5 px-3 py-1 rounded-full 
                  bg-white/10 dark:bg-white/5 text-gray-700 dark:text-gray-200 text-sm
                  border border-white/10 dark:border-white/5 hover:bg-white/20 dark:hover:bg-white/10 
                  transition-all duration-300"
              data-tag={tag}
              role="button"
              aria-pressed="false"
            >
              {tag}
            </button>
          ))
        }
      </div>
    </div>
  </div>

  <!-- Programs Grid -->
  <section class="section-sm">
    <div class="container">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 auto-rows-fr">
        {allPrograms.map((program) => <ProgramCard program={program} />)}
      </div>
    </div>
  </section>

  <script>
    // Create a self-executing function to avoid polluting the global scope
    (function () {
      // Store references to DOM elements
      let tagButtons: NodeListOf<HTMLElement>;
      let programCards: NodeListOf<HTMLElement>;
      let programCounter: HTMLElement | null;
      let clearFilterButton: HTMLElement | null;
      let totalPrograms: number;
      let activeTag: string | null = null;

      // Initialize the filtering functionality
      function initializeFiltering() {
        // Get DOM elements - do this every time to ensure we have the latest references
        tagButtons = document.querySelectorAll("[data-tag]");
        programCards = document.querySelectorAll(".program-card-container");
        programCounter = document.getElementById("program-counter");
        clearFilterButton = document.getElementById("clear-filter");
        totalPrograms = programCards.length;

        if (!tagButtons.length || !programCards.length) {
          console.debug("Tag buttons or program cards not found in the DOM.");
          return;
        }

        // Set up event listeners
        setupEventListeners();

        // If there was an active tag before page transition, restore it
        if (sessionStorage.getItem("activeTag")) {
          activeTag = sessionStorage.getItem("activeTag");
          updateUI();
        }

        console.debug("Tag filtering initialized with fresh DOM references");
      }

      function setupEventListeners() {
        // Remove existing event listeners to prevent duplicates
        tagButtons.forEach((button: HTMLElement) => {
          button.removeEventListener("click", handleTagClick);
          button.addEventListener("click", handleTagClick);
        });

        if (clearFilterButton) {
          clearFilterButton.removeEventListener("click", handleClearFilter);
          clearFilterButton.addEventListener("click", handleClearFilter);
        }
      }

      // Handler functions to make event listener removal possible
      function handleTagClick(this: HTMLElement, e: Event) {
        e.preventDefault();
        const tag = this.getAttribute("data-tag") || "";

        // Toggle active state - if clicking the same tag, clear it
        if (tag === activeTag) {
          activeTag = null;
        } else {
          activeTag = tag;
        }

        // Store active tag in sessionStorage to persist across page transitions
        if (activeTag) {
          sessionStorage.setItem("activeTag", activeTag);
        } else {
          sessionStorage.removeItem("activeTag");
        }

        // Update UI
        updateUI();
      }

      function handleClearFilter() {
        activeTag = null;
        sessionStorage.removeItem("activeTag");
        updateUI();
      }

      // Function to update the UI based on active tag
      function updateUI() {
        // Update button styles
        tagButtons.forEach((button: HTMLElement) => {
          const tag = button.getAttribute("data-tag") || "";
          if (tag === activeTag) {
            button.classList.add(
              "bg-primary/20",
              "border-primary/30",
              "font-semibold",
              "text-primary",
              "dark:text-primary",
            );
            button.setAttribute("aria-pressed", "true");
          } else {
            button.classList.remove(
              "bg-primary/20",
              "border-primary/30",
              "font-semibold",
              "text-primary",
              "dark:text-primary",
            );
            button.setAttribute("aria-pressed", "false");
          }
        });

        // Show/hide clear button
        if (clearFilterButton) {
          clearFilterButton.classList.toggle("hidden", !activeTag);
        }

        // Filter program cards
        let visibleCount = 0;

        if (!activeTag) {
          // Show all programs if no tag is active
          programCards.forEach((card: HTMLElement) => {
            card.style.display = "";
          });
          visibleCount = totalPrograms;
        } else {
          // Filter based on active tag
          programCards.forEach((card: HTMLElement) => {
            const programTagsAttr =
              card.getAttribute("data-program-tags") || "";
            const programTags = programTagsAttr
              .split(",")
              .filter((tag: string) => tag.trim() !== "");
            const hasMatchingTag = activeTag
              ? programTags.includes(activeTag)
              : false;

            card.style.display = hasMatchingTag ? "" : "none";
            if (hasMatchingTag) visibleCount++;
          });
        }

        // Update counter text
        if (programCounter) {
          if (!activeTag) {
            programCounter.textContent = `Showing all ${totalPrograms} programs`;
          } else {
            programCounter.textContent = `Showing ${visibleCount} of ${totalPrograms} programs with "${activeTag}" tag`;
          }
        }
      }

      // Initialize on DOMContentLoaded
      document.addEventListener("DOMContentLoaded", initializeFiltering);

      // Re-initialize on route changes for SPA navigation
      document.addEventListener("astro:page-load", initializeFiltering);
      document.addEventListener("astro:after-swap", initializeFiltering);

      // Initialize immediately if the DOM is already loaded
      if (
        document.readyState === "interactive" ||
        document.readyState === "complete"
      ) {
        initializeFiltering();
      }
    })();
  </script>
</Base>
