---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import ProgramCard from "@/layouts/components/ProgramCard.astro";
import AIInput from "@/layouts/components/AIInput";
import PageHeader from "@/partials/PageHeader.astro";

export const prerender = false;

// Get all programs from the content collection
const allPrograms = await getCollection("programs");

// Handle both form submissions and URL parameters
let prompt = "";
let apiResponse: {
  summary: string;
  programs: Array<{ title: string }>;
} | null = null;
let matchedPrograms: typeof allPrograms = [];
let summary = "";
let isLoading = false;
let error = "";

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    prompt = formData.get("prompt")?.toString() || "";
  } catch (error) {
    console.error("Error parsing form data:", error);
    error = "Failed to process your request. Please try again.";
  }
} else {
  // For GET requests, check URL parameters
  const url = new URL(Astro.request.url);
  prompt = url.searchParams.get("prompt") || "";
}

// Call the API if we have a prompt
if (prompt) {
  isLoading = true;
  try {
    const response = await fetch(
      "https://n8n.backbone.t3sh.com/webhook/cloudcredits/chat",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      },
    );

    if (!response.ok) {
      let msg = `:/ AI can't handle this right now. Please try again later.`;
      if (response.status >= 400 && response.status < 500) {
        try {
          const errData = await response.json();
          if (errData && typeof errData.message === "string")
            msg = errData.message;
        } catch {}
      }
      throw new Error(msg);
    }

    apiResponse = await response.json();

    if (!apiResponse || typeof apiResponse.summary !== "string") {
      throw new Error("Invalid API response format");
    }

    summary = apiResponse.summary;

    // Find programs by title from the collection
    if (apiResponse.programs && Array.isArray(apiResponse.programs)) {
      matchedPrograms = apiResponse.programs
        .map((program: { title: string }) => {
          return allPrograms.find((p) => p.data.title === program.title);
        })
        .filter((p): p is (typeof allPrograms)[0] => p !== undefined);
    }
  } catch (err) {
    console.error("Error fetching data:", err);
    // Display parsed or fallback message
    error =
      err instanceof Error
        ? err.message
        : "AI can't handle this right now. Please try again later.";
  } finally {
    isLoading = false;
  }
}
---

<script>
  // Add TypeScript declaration for the global handleAISubmit function
  declare global {
    interface Window {
      handleAISubmit: (value: string) => Promise<void>;
    }
  }

  // Define the submit handler function globally
  window.handleAISubmit = async function (value: string) {
    // Simple navigation to the assistant page with the prompt
    const url = new URL(window.location.href);
    url.pathname = "/deals/assistant";
    url.searchParams.set("prompt", value);
    window.location.href = url.toString();
  };
</script>

<Base title="Ask AI">
  <PageHeader title="Ask AI" />

  <!-- AI Input Section - Full width but with max-width for the input -->
  <div class="container">
    <div class="max-w-3xl mx-auto mb-8 mt-8">
      <AIInput client:only="react" loading={isLoading} />
    </div>
  </div>

  <section class="section-sm">
    <div class="container">
      <!-- Error message container -->
      {
        error && (
          <div
            id="error-message"
            class="text-center py-6 px-6 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-lg mb-6"
          >
            <div class="py-2">{error}</div>
            <div class="mt-4">
              <a
                href="/providers"
                class="btn bg-primary text-white px-6 py-2 rounded-md inline-flex items-center gap-2 hover:bg-opacity-90"
              >
                <span class="leading-none self-center">Explore Deals</span>
                <span class="leading-none self-center ml-1">â†’</span>
              </a>
            </div>
          </div>
        )
      }

      <!-- Results container -->
      <div
        id="results-container"
        style={summary ? "display: block" : "display: none"}
      >
        <!-- Summary - Full width but readable -->
        {
          summary && (
            <div
              class="mb-10 prose prose-lg dark:prose-invert max-w-5xl mx-auto"
              data-summary
            >
              <div
                id="summary-container"
                set:html={summary.replace(/\n/g, "<br>")}
              />
            </div>
          )
        }

        <!-- Programs - Full width grid -->
        {
          matchedPrograms.length > 0 ? (
            <div id="programs-container">
              <h2 class="mb-6">Recommended Programs</h2>
              <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 auto-rows-fr">
                {matchedPrograms.map((program) => (
                  <ProgramCard program={program} />
                ))}
              </div>
            </div>
          ) : prompt ? (
            <div id="no-results" class="text-center py-10">
              <h3>No matching programs found</h3>
            </div>
          ) : null
        }
      </div>

      <!-- Empty state -->
      <div
        id="empty-state"
        class="text-center py-10"
        style={!prompt && !isLoading ? "display: block" : "display: none"}
      >
        <h3>...</h3>
      </div>
    </div>
  </section>
</Base>
